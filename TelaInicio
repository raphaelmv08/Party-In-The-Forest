package pack;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.RoundRectangle2D;

public class TelaInicioJogo extends JFrame {
    private static final long serialVersionUID = 1L;
    private JPanel mainPanel;
    private JButton jogarButton;
    private JButton comoJogarButton;
    private JButton sairButton;
    private JLabel tituloLabel;
    
    // Painéis para as diferentes telas
    private JPanel menuPanel;
    private JPanel dificuldadePanel;

    public TelaInicioJogo() {
        // Configuração da janela principal para fullscreen
        setTitle("Party In The Forest - Jogo da Cadeia Alimentar");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setExtendedState(JFrame.MAXIMIZED_BOTH); // Modo fullscreen
        setUndecorated(true); // Remove bordas da janela para verdadeiro fullscreen
        setLocationRelativeTo(null);
        
        // Obtém o tamanho da tela
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        int width = (int) screenSize.getWidth();
        int height = (int) screenSize.getHeight();
        
        // Painel principal com layout overlay para a imagem de fundo
        mainPanel = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                // Desenha um gradiente verde azulado para representar a natureza
                Graphics2D g2d = (Graphics2D) g;
                Color color1 = new Color(140, 190, 100); // Verde claro
                Color color2 = new Color(70, 130, 180); // Azul ardosia
                GradientPaint gp = new GradientPaint(0, 0, color1, 0, getHeight(), color2);
                g2d.setPaint(gp);
                g2d.fillRect(0, 0, getWidth(), getHeight());
                
                // Adiciona elementos visuais representando a cadeia alimentar
                g2d.setColor(new Color(50, 120, 60, 150));
                for (int i = 0; i < 50; i++) { // Mais elementos para preencher a tela maior
                    int x = (int) (Math.random() * getWidth());
                    int y = (int) (Math.random() * getHeight());
                    int size = (int) (Math.random() * 50 + 30); // Elementos maiores
                    g2d.fillOval(x, y, size, size);
                }
                
                // Adiciona detalhes de folhagem
                g2d.setColor(new Color(40, 110, 50, 100));
                for (int i = 0; i < 20; i++) {
                    int x = (int) (Math.random() * getWidth());
                    int y = (int) (Math.random() * getHeight()/2);
                    int w = (int) (Math.random() * 120 + 80);
                    int h = (int) (Math.random() * 120 + 80);
                    g2d.fillOval(x, y, w, h);
                }
            }
        };
        mainPanel.setLayout(new CardLayout());
        add(mainPanel);
        
        // Cria o painel do menu inicial
        criarMenuPanel(width, height);
        
        // Cria o painel de seleção de dificuldade
        criarDificuldadePanel(width, height);
        
        // Adiciona os painéis ao painel principal
        mainPanel.add(menuPanel, "Menu");
        mainPanel.add(dificuldadePanel, "Dificuldade");
        
        setVisible(true);
    }
    
    private void criarMenuPanel(int width, int height) {
        menuPanel = new JPanel();
        menuPanel.setOpaque(false);
        menuPanel.setLayout(new BorderLayout());
        
        // Painel para o título
        JPanel tituloPanel = new JPanel();
        tituloPanel.setOpaque(false);
        tituloPanel.setBorder(BorderFactory.createEmptyBorder(height/10, 0, height/8, 0));
        
        tituloLabel = new JLabel("PARTY IN THE FOREST");
        tituloLabel.setFont(new Font("Arial", Font.BOLD, width/20)); // Título escalável
        tituloLabel.setForeground(new Color(30, 70, 40)); // Verde escuro
        tituloPanel.add(tituloLabel);
        
        // Painel para os botões
        JPanel botoesPanel = new JPanel();
        botoesPanel.setOpaque(false);
        botoesPanel.setLayout(new GridLayout(3, 1, 0, height/30));
        botoesPanel.setBorder(BorderFactory.createEmptyBorder(0, width/4, height/5, width/4));
        
        // Estilização dos botões
        Color corBotao = new Color(50, 120, 60); // Verde médio
        Color corTexto = Color.WHITE;
        Font fonteBotao = new Font("Arial", Font.BOLD, width/40);
        
        // Botão Jogar
        jogarButton = new JButton("JOGAR") {
            @Override
            protected void paintComponent(Graphics g) {
                Graphics2D g2 = (Graphics2D) g.create();
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                g2.setColor(corBotao);
                g2.fill(new RoundRectangle2D.Float(0, 0, getWidth(), getHeight(), 30, 30));
                g2.setColor(corTexto);
                FontMetrics fm = g2.getFontMetrics();
                int x = (getWidth() - fm.stringWidth(getText())) / 2;
                int y = ((getHeight() - fm.getHeight()) / 2) + fm.getAscent();
                g2.setFont(getFont());
                g2.drawString(getText(), x, y);
                g2.dispose();
            }
        };
        jogarButton.setPreferredSize(new Dimension(width/3, height/10));
        jogarButton.setFont(fonteBotao);
        jogarButton.setBorderPainted(false);
        jogarButton.setContentAreaFilled(false);
        jogarButton.setFocusPainted(false);
        jogarButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        
        // Botão Como Jogar
        comoJogarButton = new JButton("SOBRE O JOGO") {
            @Override
            protected void paintComponent(Graphics g) {
                Graphics2D g2 = (Graphics2D) g.create();
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                g2.setColor(corBotao);
                g2.fill(new RoundRectangle2D.Float(0, 0, getWidth(), getHeight(), 30, 30));
                g2.setColor(corTexto);
                FontMetrics fm = g2.getFontMetrics();
                int x = (getWidth() - fm.stringWidth(getText())) / 2;
                int y = ((getHeight() - fm.getHeight()) / 2) + fm.getAscent();
                g2.setFont(getFont());
                g2.drawString(getText(), x, y);
                g2.dispose();
            }
        };
        comoJogarButton.setPreferredSize(new Dimension(width/3, height/10));
        comoJogarButton.setFont(fonteBotao);
        comoJogarButton.setBorderPainted(false);
        comoJogarButton.setContentAreaFilled(false);
        comoJogarButton.setFocusPainted(false);
        comoJogarButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        
        // Botão Sair
        sairButton = new JButton("SAIR") {
            @Override
            protected void paintComponent(Graphics g) {
                Graphics2D g2 = (Graphics2D) g.create();
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                g2.setColor(new Color(180, 70, 60)); // Vermelho para o botão sair
                g2.fill(new RoundRectangle2D.Float(0, 0, getWidth(), getHeight(), 30, 30));
                g2.setColor(corTexto);
                FontMetrics fm = g2.getFontMetrics();
                int x = (getWidth() - fm.stringWidth(getText())) / 2;
                int y = ((getHeight() - fm.getHeight()) / 2) + fm.getAscent();
                g2.setFont(getFont());
                g2.drawString(getText(), x, y);
                g2.dispose();
            }
        };
        sairButton.setPreferredSize(new Dimension(width/3, height/10));
        sairButton.setFont(fonteBotao);
        sairButton.setBorderPainted(false);
        sairButton.setContentAreaFilled(false);
        sairButton.setFocusPainted(false);
        sairButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        
        // Adiciona os botões ao painel
        botoesPanel.add(jogarButton);
        botoesPanel.add(comoJogarButton);
        botoesPanel.add(sairButton);
        
        // Adiciona os painéis ao painel principal
        menuPanel.add(tituloPanel, BorderLayout.NORTH);
        menuPanel.add(botoesPanel, BorderLayout.CENTER);
        
        // Adiciona listeners para os botões
        jogarButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Mostra a tela de seleção de dificuldade
                CardLayout cl = (CardLayout)(mainPanel.getLayout());
                cl.show(mainPanel, "Dificuldade");
            }
        });
        
        comoJogarButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JOptionPane.showMessageDialog(TelaInicioJogo.this, 
                    "COMO JOGAR:\n\n" +
                    "1. O objetivo é montar corretamente as cadeias alimentares\n" +
                    "2. Arraste os organismos para suas posições corretas\n" +
                    "3. Conecte produtores, consumidores e decompositores\n" +
                    "4. Complete o máximo de cadeias possíveis!\n\n" +
                    "Boa sorte e aprenda sobre ecologia!", 
                    "Como Jogar - Party In The Forest", JOptionPane.INFORMATION_MESSAGE);
            }
        });
        
        sairButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int confirmacao = JOptionPane.showConfirmDialog(TelaInicioJogo.this, 
                    "Tem certeza que deseja sair do jogo?", "Sair", 
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                
                if (confirmacao == JOptionPane.YES_OPTION) {
                    System.exit(0);
                }
            }
        });
    }
    
    private void criarDificuldadePanel(int width, int height) {
        dificuldadePanel = new JPanel();
        dificuldadePanel.setOpaque(false);
        dificuldadePanel.setLayout(new BorderLayout());
        
        // Título da tela de dificuldade
        JLabel tituloDificuldade = new JLabel("SELECIONE A DIFICULDADE", SwingConstants.CENTER);
        tituloDificuldade.setFont(new Font("Arial", Font.BOLD, width/25));
        tituloDificuldade.setForeground(new Color(30, 70, 40));
        tituloDificuldade.setBorder(BorderFactory.createEmptyBorder(height/10, 0, height/10, 0));
        
        // Painel para os botões de dificuldade
        JPanel botoesDificuldadePanel = new JPanel();
        botoesDificuldadePanel.setOpaque(false);
        botoesDificuldadePanel.setLayout(new GridLayout(4, 1, 15, 15));
        botoesDificuldadePanel.setBorder(BorderFactory.createEmptyBorder(0, width/4, height/4, width/4));
        
        // Cores para os botões de dificuldade
        Color corFacil = new Color(70, 150, 80);    // Verde
        Color corMedio = new Color(50, 120, 180);   // Azul
        Color corDificil = new Color(180, 70, 60);  // Vermelho
        Color corVoltar = new Color(100, 100, 100); // Cinza
        Color corTexto = Color.WHITE;
        Font fonteDificuldade = new Font("Arial", Font.BOLD, width/45);
        
        // Botão Fácil
        JButton btnFacil = criarBotaoDificuldade("FÁCIL", corFacil, corTexto, fonteDificuldade, width, height);
        btnFacil.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                iniciarJogo("FÁCIL");
            }
        });
        
        // Botão Médio
        JButton btnMedio = criarBotaoDificuldade("MÉDIO", corMedio, corTexto, fonteDificuldade, width, height);
        btnMedio.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                iniciarJogo("MÉDIO");
            }
        });
        
        // Botão Difícil
        JButton btnDificil = criarBotaoDificuldade("DIFÍCIL", corDificil, corTexto, fonteDificuldade, width, height);
        btnDificil.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                iniciarJogo("DIFÍCIL");
            }
        });
        
        // Botão Voltar
        JButton btnVoltar = criarBotaoDificuldade("VOLTAR", corVoltar, corTexto, fonteDificuldade, width, height);
        btnVoltar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                CardLayout cl = (CardLayout)(mainPanel.getLayout());
                cl.show(mainPanel, "Menu");
            }
        });
        
        // Adiciona os botões ao painel
        botoesDificuldadePanel.add(btnFacil);
        botoesDificuldadePanel.add(btnMedio);
        botoesDificuldadePanel.add(btnDificil);
        botoesDificuldadePanel.add(btnVoltar);
        
        // Adiciona os componentes ao painel de dificuldade
        dificuldadePanel.add(tituloDificuldade, BorderLayout.NORTH);
        dificuldadePanel.add(botoesDificuldadePanel, BorderLayout.CENTER);
    }
    
    private JButton criarBotaoDificuldade(String texto, Color corFundo, Color corTexto, Font fonte, int width, int height) {
        JButton botao = new JButton(texto) {
            @Override
            protected void paintComponent(Graphics g) {
                Graphics2D g2 = (Graphics2D) g.create();
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                g2.setColor(corFundo);
                g2.fill(new RoundRectangle2D.Float(0, 0, getWidth(), getHeight(), 30, 30));
                g2.setColor(corTexto);
                FontMetrics fm = g2.getFontMetrics();
                int x = (getWidth() - fm.stringWidth(getText())) / 2;
                int y = ((getHeight() - fm.getHeight()) / 2) + fm.getAscent();
                g2.setFont(getFont());
                g2.drawString(getText(), x, y);
                g2.dispose();
            }
        };
        botao.setPreferredSize(new Dimension(width/3, height/10));
        botao.setFont(fonte);
        botao.setBorderPainted(false);
        botao.setContentAreaFilled(false);
        botao.setFocusPainted(false);
        botao.setCursor(new Cursor(Cursor.HAND_CURSOR));
        return botao;
    }
    
    private void iniciarJogo(String dificuldade) {
        JOptionPane.showMessageDialog(this, 
            "Iniciando jogo no modo " + dificuldade + "!\n\n" +
            getDescricaoDificuldade(dificuldade), 
            "Party In The Forest - " + dificuldade, 
            JOptionPane.INFORMATION_MESSAGE);
        
        // Aqui você pode adicionar a lógica para iniciar o jogo com a dificuldade selecionada
        // Por exemplo: new JogoPrincipal(dificuldade);
    }
    
    private String getDescricaoDificuldade(String dificuldade) {
        switch(dificuldade) {
            case "FÁCIL":
                return "Modo Fácil:\n- Mais tempo para completar as cadeias\n- Dicas visuais disponíveis\n- Menos eventos aleatórios";
            case "MÉDIO":
                return "Modo Médio:\n- Tempo balanceado\n- Algumas dicas disponíveis\n- Eventos aleatórios moderados";
            case "DIFÍCIL":
                return "Modo Difícil:\n- Tempo limitado\n- Sem dicas\n- Muitos eventos aleatórios\n- Maior pontuação possível";
            default:
                return "";
        }
    }
    
    public static void main(String[] args) {
        // Define o look and feel do sistema para uma aparência mais moderna
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        // Executa a interface na thread de eventos do Swing
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new TelaInicioJogo();
            }
        });
    }
}
